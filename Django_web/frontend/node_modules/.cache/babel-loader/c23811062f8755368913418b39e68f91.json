{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\drago\\\\Documents\\\\Github Repository VSCode\\\\DB_end_project\\\\frontend\\\\src\\\\utils\\\\AuthContext.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport default AuthContext;\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let [authTokens, setAuthTokens] = useState(() => localStorage.getItem(\"authTokens\") ? JSON.parse(localStorage.getItem(\"authTokens\")) : null);\n  let [user, setUser] = useState(() => localStorage.getItem(\"authTokens\") ? jwt_decode(localStorage.getItem(\"authTokens\")) : null);\n  console.log(user);\n  let [loading, setLoading] = useState(true);\n\n  let loginUser = async e => {\n    e.preventDefault();\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: e.target.email.value,\n        password: e.target.password.value\n      })\n    });\n    let data = await response.json();\n    console.log(data);\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n    } else {\n      alert(\"Something went wrong!\");\n    }\n  };\n\n  let logoutUser = () => {\n    setAuthTokens(null);\n    setUser(null);\n    localStorage.removeItem(\"authTokens\");\n  };\n\n  let updateToken = async () => {\n    console.log(\"Updated token\");\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/refresh/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        refresh: authTokens === null || authTokens === void 0 ? void 0 : authTokens.refresh\n      })\n    });\n    let data = await response.json();\n\n    if (response.status === 200) {\n      setAuthTokens(data);\n      setUser(jwt_decode(data.access));\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\n    } else {\n      logoutUser();\n    }\n\n    if (loading) {\n      setLoading(false);\n    }\n  };\n\n  let register = async x => {\n    await fetch(\"/api/register/\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: x.target.username2.value,\n        password: x.target.password2.value,\n        password2: x.target.password22.value,\n        email: x.target.email2.value,\n        first_name: x.target.first_name.value,\n        last_name: x.target.last_name.value,\n        phone: x.target.phone.value,\n        gender: x.target.gender.value,\n        address: x.target.address.value\n      })\n    });\n  };\n\n  let [value, setValue] = useState(\"default\");\n  let contextData = {\n    user: user,\n    authTokens: authTokens,\n    loginUser: loginUser,\n    logoutUser: logoutUser,\n    register: register,\n    value: value,\n    setValue: setValue\n  };\n  useEffect(() => {\n    if (loading) {\n      updateToken();\n    }\n\n    let fourMinutes = 1000 * 60 * 4;\n    let interval = setInterval(() => {\n      if (authTokens) {\n        updateToken();\n      }\n    }, fourMinutes);\n    return () => clearInterval(interval);\n  }, [authTokens, loading]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextData,\n    children: loading ? null : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"kLZc5LZ3P9MX50Ohnl1ozAuM7SU=\");\n\n_c = AuthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["C:/Users/drago/Documents/Github Repository VSCode/DB_end_project/frontend/src/utils/AuthContext.jsx"],"names":["createContext","useState","useEffect","jwt_decode","AuthContext","AuthProvider","children","authTokens","setAuthTokens","localStorage","getItem","JSON","parse","user","setUser","console","log","loading","setLoading","loginUser","e","preventDefault","response","fetch","method","headers","body","stringify","email","target","value","password","data","json","status","access","setItem","alert","logoutUser","removeItem","updateToken","refresh","register","x","username","username2","password2","password22","email2","first_name","last_name","phone","gender","address","setValue","contextData","fourMinutes","interval","setInterval","clearInterval"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,UAAP,MAAuB,YAAvB;;AAEA,MAAMC,WAAW,gBAAGJ,aAAa,EAAjC;AAEA,eAAeI,WAAf;AAEA,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,MAAI,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,MACzCQ,YAAY,CAACC,OAAb,CAAqB,YAArB,IACIC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAX,CADJ,GAEI,IAHoC,CAA1C;AAKA,MAAI,CAACG,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,MAC7BQ,YAAY,CAACC,OAAb,CAAqB,YAArB,IACIP,UAAU,CAACM,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD,CADd,GAEI,IAHwB,CAA9B;AAKAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,MAAI,CAACI,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,IAAD,CAApC;;AAEA,MAAIkB,SAAS,GAAG,MAAOC,CAAP,IAAa;AAC3BA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAD,EAAqC;AAC7DC,MAAAA,MAAM,EAAE,MADqD;AAE7DC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFoD;AAK7DC,MAAAA,IAAI,EAAEf,IAAI,CAACgB,SAAL,CAAe;AACnBC,QAAAA,KAAK,EAAER,CAAC,CAACS,MAAF,CAASD,KAAT,CAAeE,KADH;AAEnBC,QAAAA,QAAQ,EAAEX,CAAC,CAACS,MAAF,CAASE,QAAT,CAAkBD;AAFT,OAAf;AALuD,KAArC,CAA1B;AAUA,QAAIE,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAjB;AAEAlB,IAAAA,OAAO,CAACC,GAAR,CAAYgB,IAAZ;;AAEA,QAAIV,QAAQ,CAACY,MAAT,KAAoB,GAAxB,EAA6B;AAC3B1B,MAAAA,aAAa,CAACwB,IAAD,CAAb;AACAlB,MAAAA,OAAO,CAACX,UAAU,CAAC6B,IAAI,CAACG,MAAN,CAAX,CAAP;AACA1B,MAAAA,YAAY,CAAC2B,OAAb,CAAqB,YAArB,EAAmCzB,IAAI,CAACgB,SAAL,CAAeK,IAAf,CAAnC;AACD,KAJD,MAIO;AACLK,MAAAA,KAAK,CAAC,uBAAD,CAAL;AACD;AACF,GAvBD;;AAyBA,MAAIC,UAAU,GAAG,MAAM;AACrB9B,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAM,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAL,IAAAA,YAAY,CAAC8B,UAAb,CAAwB,YAAxB;AACD,GAJD;;AAMA,MAAIC,WAAW,GAAG,YAAY;AAC5BzB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAIM,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAAD,EAA6C;AACrEC,MAAAA,MAAM,EAAE,MAD6D;AAErEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF4D;AAKrEC,MAAAA,IAAI,EAAEf,IAAI,CAACgB,SAAL,CAAe;AAAEc,QAAAA,OAAO,EAAElC,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEkC;AAAvB,OAAf;AAL+D,KAA7C,CAA1B;AAOA,QAAIT,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAjB;;AAEA,QAAIX,QAAQ,CAACY,MAAT,KAAoB,GAAxB,EAA6B;AAC3B1B,MAAAA,aAAa,CAACwB,IAAD,CAAb;AACAlB,MAAAA,OAAO,CAACX,UAAU,CAAC6B,IAAI,CAACG,MAAN,CAAX,CAAP;AACA1B,MAAAA,YAAY,CAAC2B,OAAb,CAAqB,YAArB,EAAmCzB,IAAI,CAACgB,SAAL,CAAeK,IAAf,CAAnC;AACD,KAJD,MAIO;AACLM,MAAAA,UAAU;AACX;;AAED,QAAIrB,OAAJ,EAAa;AACXC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAtBD;;AAwBA,MAAIwB,QAAQ,GAAG,MAAOC,CAAP,IAAa;AAC1B,UAAMpB,KAAK,CAAC,gBAAD,EAAmB;AAC5BC,MAAAA,MAAM,EAAE,MADoB;AAE5BC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFmB;AAK5BC,MAAAA,IAAI,EAAEf,IAAI,CAACgB,SAAL,CAAe;AACnBiB,QAAAA,QAAQ,EAAED,CAAC,CAACd,MAAF,CAASgB,SAAT,CAAmBf,KADV;AAEnBC,QAAAA,QAAQ,EAAEY,CAAC,CAACd,MAAF,CAASiB,SAAT,CAAmBhB,KAFV;AAGnBgB,QAAAA,SAAS,EAAEH,CAAC,CAACd,MAAF,CAASkB,UAAT,CAAoBjB,KAHZ;AAInBF,QAAAA,KAAK,EAAEe,CAAC,CAACd,MAAF,CAASmB,MAAT,CAAgBlB,KAJJ;AAKnBmB,QAAAA,UAAU,EAAEN,CAAC,CAACd,MAAF,CAASoB,UAAT,CAAoBnB,KALb;AAMnBoB,QAAAA,SAAS,EAAEP,CAAC,CAACd,MAAF,CAASqB,SAAT,CAAmBpB,KANX;AAOnBqB,QAAAA,KAAK,EAAER,CAAC,CAACd,MAAF,CAASsB,KAAT,CAAerB,KAPH;AAQnBsB,QAAAA,MAAM,EAAET,CAAC,CAACd,MAAF,CAASuB,MAAT,CAAgBtB,KARL;AASnBuB,QAAAA,OAAO,EAAEV,CAAC,CAACd,MAAF,CAASwB,OAAT,CAAiBvB;AATP,OAAf;AALsB,KAAnB,CAAX;AAiBD,GAlBD;;AAoBA,MAAI,CAACA,KAAD,EAAQwB,QAAR,IAAoBrD,QAAQ,CAAC,SAAD,CAAhC;AAEA,MAAIsD,WAAW,GAAG;AAChB1C,IAAAA,IAAI,EAAEA,IADU;AAEhBN,IAAAA,UAAU,EAAEA,UAFI;AAGhBY,IAAAA,SAAS,EAAEA,SAHK;AAIhBmB,IAAAA,UAAU,EAAEA,UAJI;AAKhBI,IAAAA,QAAQ,EAAEA,QALM;AAMhBZ,IAAAA,KAAK,EAAEA,KANS;AAOhBwB,IAAAA,QAAQ,EAAEA;AAPM,GAAlB;AAUApD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,OAAJ,EAAa;AACXuB,MAAAA,WAAW;AACZ;;AAED,QAAIgB,WAAW,GAAG,OAAO,EAAP,GAAY,CAA9B;AACA,QAAIC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC/B,UAAInD,UAAJ,EAAgB;AACdiC,QAAAA,WAAW;AACZ;AACF,KAJyB,EAIvBgB,WAJuB,CAA1B;AAKA,WAAO,MAAMG,aAAa,CAACF,QAAD,CAA1B;AACD,GAZQ,EAYN,CAAClD,UAAD,EAAaU,OAAb,CAZM,CAAT;AAcA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEsC,WAA7B;AAAA,cACGtC,OAAO,GAAG,IAAH,GAAUX;AADpB;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxHM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useState, useEffect } from \"react\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport default AuthContext;\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  let [authTokens, setAuthTokens] = useState(() =>\r\n    localStorage.getItem(\"authTokens\")\r\n      ? JSON.parse(localStorage.getItem(\"authTokens\"))\r\n      : null\r\n  );\r\n  let [user, setUser] = useState(() =>\r\n    localStorage.getItem(\"authTokens\")\r\n      ? jwt_decode(localStorage.getItem(\"authTokens\"))\r\n      : null\r\n  );\r\n  console.log(user);\r\n  let [loading, setLoading] = useState(true);\r\n\r\n  let loginUser = async (e) => {\r\n    e.preventDefault();\r\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        email: e.target.email.value,\r\n        password: e.target.password.value,\r\n      }),\r\n    });\r\n    let data = await response.json();\r\n\r\n    console.log(data);\r\n\r\n    if (response.status === 200) {\r\n      setAuthTokens(data);\r\n      setUser(jwt_decode(data.access));\r\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n    } else {\r\n      alert(\"Something went wrong!\");\r\n    }\r\n  };\r\n\r\n  let logoutUser = () => {\r\n    setAuthTokens(null);\r\n    setUser(null);\r\n    localStorage.removeItem(\"authTokens\");\r\n  };\r\n\r\n  let updateToken = async () => {\r\n    console.log(\"Updated token\");\r\n    let response = await fetch(\"http://127.0.0.1:8000/api/token/refresh/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ refresh: authTokens?.refresh }),\r\n    });\r\n    let data = await response.json();\r\n\r\n    if (response.status === 200) {\r\n      setAuthTokens(data);\r\n      setUser(jwt_decode(data.access));\r\n      localStorage.setItem(\"authTokens\", JSON.stringify(data));\r\n    } else {\r\n      logoutUser();\r\n    }\r\n\r\n    if (loading) {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  let register = async (x) => {\r\n    await fetch(\"/api/register/\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        username: x.target.username2.value,\r\n        password: x.target.password2.value,\r\n        password2: x.target.password22.value,\r\n        email: x.target.email2.value,\r\n        first_name: x.target.first_name.value,\r\n        last_name: x.target.last_name.value,\r\n        phone: x.target.phone.value,\r\n        gender: x.target.gender.value,\r\n        address: x.target.address.value,\r\n      }),\r\n    });\r\n  };\r\n\r\n  let [value, setValue] = useState(\"default\");\r\n\r\n  let contextData = {\r\n    user: user,\r\n    authTokens: authTokens,\r\n    loginUser: loginUser,\r\n    logoutUser: logoutUser,\r\n    register: register,\r\n    value: value,\r\n    setValue: setValue,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      updateToken();\r\n    }\r\n\r\n    let fourMinutes = 1000 * 60 * 4;\r\n    let interval = setInterval(() => {\r\n      if (authTokens) {\r\n        updateToken();\r\n      }\r\n    }, fourMinutes);\r\n    return () => clearInterval(interval);\r\n  }, [authTokens, loading]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextData}>\r\n      {loading ? null : children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}